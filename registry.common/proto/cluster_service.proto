syntax = "proto3";
import "google/protobuf/empty.proto";
option go_package = "../proto";
import "error_type.proto";

service ClusterService {
  rpc GetNodeInfo(NodeInfoRequest) returns (NodeInfoResponse) {}
  rpc ForwardJoinClusterRequest(JoinClusterRequest)returns(google.protobuf.Empty){}
  rpc JoinCluster(JoinClusterRequest)returns(google.protobuf.Empty){}
  rpc TransferLeadership(TransferRequest)returns(TransferResponse){}
  rpc PublishMetadata(PublishMetadataRequest)returns(PublishMetadataResponse){}
  rpc GetFollowerInfo(FollowerInfoRequest)returns(FollowerInfoResponse){}

  rpc ForwardClientRequest(ForwardCliRequest) returns (ForwardCliResponse) {}
}

enum TransferStatus {
  Transitioning = 0;
  Completed = 1;
}
enum StartupMode {
  StandAlone = 0;
  Cluster = 1;
}
enum RequestType {
  Unknown = 0;
  Register = 1;
  Heartbeat = 2;
  SubService = 3;
  FetchServiceInstance = 4;
}
enum ClusterState {
  NONE_STATE = 0;
  INITIALIZING = 1;
  // Active The cluster is active and can be read and written to
  ACTIVE = 2;
  // Transitioning The cluster is transitioning to a new state
  // In this process, the cluster will resize the data shards, just
  // processes read requests and rejects write requests
  TRANSITIONING = 3;
  DOWN = 4;
  // StandBy The cluster is in a standby state and can only be read
  // It's possible that the cluster is electing a leader
  STANDBY = 5;
  // Maintenance The cluster is in a maintenance state and cannot be read or written
  MAINTENANCE = 6;
  UNKNOWN = 7;
}

message ForwardCliResponse {
  ErrorType errorType = 1;
  uint64 clusterId = 2;
  string leaderId = 3;
  uint64 term = 4;
  bytes payload = 5;
}
message ForwardCliRequest {
  uint64 clusterId = 1;
  string leaderId = 2;
  uint64 term = 3;
  RequestType requestType = 4;
  bytes payload = 5;
  bool syncReplica = 6;
}

message FollowerInfoRequest {
  string leaderId = 1;
  uint64 term = 2;
}
message FollowerInfoResponse {
  ErrorType errorType = 1;
  string leaderId = 2;
  uint64 term = 3;
  string clusterState = 4;
  string nodeId = 5;
  string nodeAddr = 6;
}
message PublishMetadataRequest {
  string leaderId = 1;
  uint64 term = 2;
  string metaData = 3;
}

message TransferRequest {
  string leaderId = 1;
  string addr = 2;
  uint64 term = 3;
  TransferStatus status = 4;
}

message TransferResponse {
  ErrorType errorType = 1;
  string clusterState = 2;
  string leaderId = 3;
  uint64 term = 4;
}
message PublishMetadataResponse {
  ErrorType errorType = 1;
  string clusterState = 2;
  string leaderId = 3;
  uint64 term = 4;
}
message JoinClusterRequest {
  string nodeId = 1;
  string nodeAddr = 2;
  bool autoJoinClusterEnable=3;
  bool isCandidate = 4;
}

// Bring the current node information
message NodeInfoRequest {
  string nodeId = 1;
  string nodeIp = 2;
  uint32 internalPort = 3;
  bool isCandidate = 4;
  bool autoJoinClusterEnable=5;
  uint32 ExternalTcpPort=6;
  uint32 ExternalHttpPort=7;
}

// Reply to the current node information
message NodeInfoResponse {
  string nodeId = 1;
  string nodeIp = 2;
  uint64 internalPort = 3;
  bool isCandidate = 4;
  bool autoJoinClusterEnable=5;
  StartupMode startupMode=6;
  uint32 ExternalTcpPort=7;
  uint32 ExternalHttpPort=8;
  uint64 appliedIndex=9;
  ClusterState clusterState=10;
  string leaderId=11;
  string leaderAddr=12;
  uint64 term=13;
}
